def TreeNode buildTree(data, index)
    visited ← new Array(n);                            
    return buildTreeUtils(data, index, visited);
end


def TreeNode buildTreeUtils(data, index, visited)
    entropyList ← calcInformationGain(data, index);
    maxIndex    ← getMaxIndex(entropyList, visited);               // returns max index that has not yet been visited
    parentNode  ← new TreeNode(maxIndex);
    
    visited[maxIndex] <- true;
    
    bucketList ← getDistinct(data, index);                         // returns all distinct buckets for an attribute
    if (bucketList.size = 1) then                                  // if there is only one bucket
        retrun parentNode.withMajority(data);                      // then create no new branch, instead return node as majority
    fi


    for (bucket ∈ splitData(data, bestIndex)) do
        childNode ← buildTreeUtils(bucket.value(), index, visited.clone());

        parentNode.setReference(bucket.key(), child);
        child.setParent(parentNode);
    od
end
